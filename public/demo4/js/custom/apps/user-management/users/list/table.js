/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/user-management/users/list/table.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/user-management/users/list/table.js ***!
  \**********************************************************************************/
/***/ (() => {

eval("\n\nvar KTUsersList = function () {\n  // Define shared variables\n  var table = document.getElementById('table-team-members');\n  var toolbarBase;\n  var toolbarSelected;\n  var selectedCount;\n  window.LaravelDataTable['table-team-members'] = $(\"#dataTableBuilder\").DataTable({});\n  console.log(LaravelDataTable['table-team-members']); // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\n\n  var handleSearchDatatable = function handleSearchDatatable() {\n    var tables = $.fn.dataTable.tables(true);\n    var filterSearch = document.querySelector('[data-kt-user-table-filter=\"search\"]');\n    filterSearch.addEventListener('keyup', function (e) {\n      $(tables).search(e.target.value).draw();\n    });\n  }; // Filter Datatable\n\n\n  var handleFilterDatatable = function handleFilterDatatable() {\n    // Select filter options\n    var filterForm = document.querySelector('[data-kt-user-table-filter=\"form\"]');\n    var filterButton = filterForm.querySelector('[data-kt-user-table-filter=\"filter\"]');\n    var selectOptions = filterForm.querySelectorAll('select'); // Filter datatable on submit\n\n    filterButton.addEventListener('click', function () {\n      var filterString = ''; // Get filter values\n\n      selectOptions.forEach(function (item, index) {\n        if (item.value && item.value !== '') {\n          if (index !== 0) {\n            filterString += ' ';\n          } // Build filter value options\n\n\n          filterString += item.value;\n        }\n      }); // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\n\n      datatable.search(filterString).draw();\n    });\n  }; // Reset Filter\n\n\n  var handleResetForm = function handleResetForm() {\n    // Select reset button\n    var resetButton = document.querySelector('[data-kt-user-table-filter=\"reset\"]'); // Reset datatable\n\n    resetButton.addEventListener('click', function () {\n      // Select filter options\n      var filterForm = document.querySelector('[data-kt-user-table-filter=\"form\"]');\n      var selectOptions = filterForm.querySelectorAll('select'); // Reset select2 values -- more info: https://select2.org/programmatic-control/add-select-clear-items\n\n      selectOptions.forEach(function (select) {\n        $(select).val('').trigger('change');\n      }); // Reset datatable --- official docs reference: https://datatables.net/reference/api/search()\n\n      datatable.search('').draw();\n    });\n  }; // Delete subscirption\n\n\n  var handleDeleteRows = function handleDeleteRows() {\n    // Select all delete buttons\n    var deleteButtons = table.querySelectorAll('[data-kt-users-table-filter=\"delete_row\"]');\n    deleteButtons.forEach(function (d) {\n      // Delete button on click\n      d.addEventListener('click', function (e) {\n        e.preventDefault(); // Select parent row\n\n        var parent = e.target.closest('tr'); // Get user name\n\n        var userName = parent.querySelectorAll('td')[1].querySelectorAll('a')[1].innerText; // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n\n        Swal.fire({\n          text: \"Are you sure you want to delete \" + userName + \"?\",\n          icon: \"warning\",\n          showCancelButton: true,\n          buttonsStyling: false,\n          confirmButtonText: \"Yes, delete!\",\n          cancelButtonText: \"No, cancel\",\n          customClass: {\n            confirmButton: \"btn fw-bold btn-danger\",\n            cancelButton: \"btn fw-bold btn-active-light-primary\"\n          }\n        }).then(function (result) {\n          if (result.value) {\n            Swal.fire({\n              text: \"You have deleted \" + userName + \"!.\",\n              icon: \"success\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-primary\"\n              }\n            }).then(function () {\n              // Remove current row\n              datatable.row($(parent)).remove().draw();\n            }).then(function () {\n              // Detect checked checkboxes\n              toggleToolbars();\n            });\n          } else if (result.dismiss === 'cancel') {\n            Swal.fire({\n              text: customerName + \" was not deleted.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-primary\"\n              }\n            });\n          }\n        });\n      });\n    });\n  }; // Init toggle toolbar\n\n\n  var initToggleToolbar = function initToggleToolbar() {\n    // Toggle selected action toolbar\n    // Select all checkboxes\n    var checkboxes = table.querySelectorAll('[type=\"checkbox\"]'); // Select elements\n\n    toolbarBase = document.querySelector('[data-kt-user-table-toolbar=\"base\"]');\n    toolbarSelected = document.querySelector('[data-kt-user-table-toolbar=\"selected\"]');\n    selectedCount = document.querySelector('[data-kt-user-table-select=\"selected_count\"]');\n    var deleteSelected = document.querySelector('[data-kt-user-table-select=\"delete_selected\"]'); // Toggle delete selected toolbar\n\n    checkboxes.forEach(function (c) {\n      // Checkbox on click event\n      c.addEventListener('click', function () {\n        setTimeout(function () {\n          toggleToolbars();\n        }, 50);\n      });\n    }); // Deleted selected rows\n\n    deleteSelected.addEventListener('click', function () {\n      // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n      Swal.fire({\n        text: \"Are you sure you want to delete selected customers?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, delete!\",\n        cancelButtonText: \"No, cancel\",\n        customClass: {\n          confirmButton: \"btn fw-bold btn-danger\",\n          cancelButton: \"btn fw-bold btn-active-light-primary\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          Swal.fire({\n            text: \"You have deleted all selected customers!.\",\n            icon: \"success\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          }).then(function () {\n            // Remove all selected customers\n            checkboxes.forEach(function (c) {\n              if (c.checked) {\n                datatable.row($(c.closest('tbody tr'))).remove().draw();\n              }\n            }); // Remove header checked box\n\n            var headerCheckbox = table.querySelectorAll('[type=\"checkbox\"]')[0];\n            headerCheckbox.checked = false;\n          }).then(function () {\n            toggleToolbars(); // Detect checked checkboxes\n\n            initToggleToolbar(); // Re-init toolbar to recalculate checkboxes\n          });\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Selected customers was not deleted.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  }; // Toggle toolbars\n\n\n  var toggleToolbars = function toggleToolbars() {\n    // Select refreshed checkbox DOM elements\n    var allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]'); // Detect checkboxes state & count\n\n    var checkedState = false;\n    var count = 0; // Count checked boxes\n\n    allCheckboxes.forEach(function (c) {\n      if (c.checked) {\n        checkedState = true;\n        count++;\n      }\n    }); // Toggle toolbars\n\n    if (checkedState) {\n      selectedCount.innerHTML = count;\n      toolbarBase.classList.add('d-none');\n      toolbarSelected.classList.remove('d-none');\n    } else {\n      toolbarBase.classList.remove('d-none');\n      toolbarSelected.classList.add('d-none');\n    }\n  };\n\n  return {\n    // Public functions\n    init: function init() {\n      if (!table) {\n        return;\n      }\n\n      initToggleToolbar();\n      handleSearchDatatable();\n      handleResetForm();\n      handleDeleteRows();\n      handleFilterDatatable();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTUsersList.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/user-management/users/list/table.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/user-management/users/list/table.js"]();
/******/ 	
/******/ })()
;