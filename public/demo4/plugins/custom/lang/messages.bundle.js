/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/lang/messages.js":
/*!***************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/lang/messages.js ***!
  \***************************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\n *  Lang.js for Laravel localization in JavaScript.\n *\n *  @version 1.1.10\n *  @license MIT https://github.com/rmariuzzo/Lang.js/blob/master/LICENSE\n *  @site    https://github.com/rmariuzzo/Lang.js\n *  @author  Rubens Mariuzzo <rubens@mariuzzo.com>\n */\n(function (root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(this, function () {\n  \"use strict\";\n\n  function inferLocale() {\n    if (typeof document !== \"undefined\" && document.documentElement) {\n      return document.documentElement.lang;\n    }\n  }\n\n  function convertNumber(str) {\n    if (str === \"-Inf\") {\n      return -Infinity;\n    } else if (str === \"+Inf\" || str === \"Inf\" || str === \"*\") {\n      return Infinity;\n    }\n\n    return parseInt(str, 10);\n  }\n\n  var intervalRegexp = /^({\\s*(\\-?\\d+(\\.\\d+)?[\\s*,\\s*\\-?\\d+(\\.\\d+)?]*)\\s*})|([\\[\\]])\\s*(-Inf|\\*|\\-?\\d+(\\.\\d+)?)\\s*,\\s*(\\+?Inf|\\*|\\-?\\d+(\\.\\d+)?)\\s*([\\[\\]])$/;\n  var anyIntervalRegexp = /({\\s*(\\-?\\d+(\\.\\d+)?[\\s*,\\s*\\-?\\d+(\\.\\d+)?]*)\\s*})|([\\[\\]])\\s*(-Inf|\\*|\\-?\\d+(\\.\\d+)?)\\s*,\\s*(\\+?Inf|\\*|\\-?\\d+(\\.\\d+)?)\\s*([\\[\\]])/;\n  var defaults = {\n    locale: \"en\"\n  };\n\n  var Lang = function Lang(options) {\n    options = options || {};\n    this.locale = options.locale || inferLocale() || defaults.locale;\n    this.fallback = options.fallback;\n    this.messages = options.messages;\n  };\n\n  Lang.prototype.setMessages = function (messages) {\n    this.messages = messages;\n  };\n\n  Lang.prototype.getLocale = function () {\n    return this.locale || this.fallback;\n  };\n\n  Lang.prototype.setLocale = function (locale) {\n    this.locale = locale;\n  };\n\n  Lang.prototype.getFallback = function () {\n    return this.fallback;\n  };\n\n  Lang.prototype.setFallback = function (fallback) {\n    this.fallback = fallback;\n  };\n\n  Lang.prototype.has = function (key, locale) {\n    if (typeof key !== \"string\" || !this.messages) {\n      return false;\n    }\n\n    return this._getMessage(key, locale) !== null;\n  };\n\n  Lang.prototype.get = function (key, replacements, locale) {\n    if (!this.has(key, locale)) {\n      return key;\n    }\n\n    var message = this._getMessage(key, locale);\n\n    if (message === null) {\n      return key;\n    }\n\n    if (replacements) {\n      message = this._applyReplacements(message, replacements);\n    }\n\n    return message;\n  };\n\n  Lang.prototype.trans = function (key, replacements) {\n    return this.get(key, replacements);\n  };\n\n  Lang.prototype.choice = function (key, number, replacements, locale) {\n    replacements = typeof replacements !== \"undefined\" ? replacements : {};\n    replacements.count = number;\n    var message = this.get(key, replacements, locale);\n\n    if (message === null || message === undefined) {\n      return message;\n    }\n\n    var messageParts = message.split(\"|\");\n    var explicitRules = [];\n\n    for (var i = 0; i < messageParts.length; i++) {\n      messageParts[i] = messageParts[i].trim();\n\n      if (anyIntervalRegexp.test(messageParts[i])) {\n        var messageSpaceSplit = messageParts[i].split(/\\s/);\n        explicitRules.push(messageSpaceSplit.shift());\n        messageParts[i] = messageSpaceSplit.join(\" \");\n      }\n    }\n\n    if (messageParts.length === 1) {\n      return message;\n    }\n\n    for (var j = 0; j < explicitRules.length; j++) {\n      if (this._testInterval(number, explicitRules[j])) {\n        return messageParts[j];\n      }\n    }\n\n    var pluralForm = this._getPluralForm(number);\n\n    return messageParts[pluralForm];\n  };\n\n  Lang.prototype.transChoice = function (key, count, replacements) {\n    return this.choice(key, count, replacements);\n  };\n\n  Lang.prototype._parseKey = function (key, locale) {\n    if (typeof key !== \"string\" || typeof locale !== \"string\") {\n      return null;\n    }\n\n    var segments = key.split(\".\");\n    var source = segments[0].replace(/\\//g, \".\");\n    return {\n      source: locale + \".\" + source,\n      sourceFallback: this.getFallback() + \".\" + source,\n      entries: segments.slice(1)\n    };\n  };\n\n  Lang.prototype._getMessage = function (key, locale) {\n    locale = locale || this.getLocale();\n    key = this._parseKey(key, locale);\n\n    if (this.messages[key.source] === undefined && this.messages[key.sourceFallback] === undefined) {\n      return null;\n    }\n\n    var message = this.messages[key.source];\n    var entries = key.entries.slice();\n    var subKey = \"\";\n\n    while (entries.length && message !== undefined) {\n      var subKey = !subKey ? entries.shift() : subKey.concat(\".\", entries.shift());\n\n      if (message[subKey] !== undefined) {\n        message = message[subKey];\n        subKey = \"\";\n      }\n    }\n\n    if (typeof message !== \"string\" && this.messages[key.sourceFallback]) {\n      message = this.messages[key.sourceFallback];\n      entries = key.entries.slice();\n      subKey = \"\";\n\n      while (entries.length && message !== undefined) {\n        var subKey = !subKey ? entries.shift() : subKey.concat(\".\", entries.shift());\n\n        if (message[subKey]) {\n          message = message[subKey];\n          subKey = \"\";\n        }\n      }\n    }\n\n    if (typeof message !== \"string\") {\n      return null;\n    }\n\n    return message;\n  };\n\n  Lang.prototype._findMessageInTree = function (pathSegments, tree) {\n    while (pathSegments.length && tree !== undefined) {\n      var dottedKey = pathSegments.join(\".\");\n\n      if (tree[dottedKey]) {\n        tree = tree[dottedKey];\n        break;\n      }\n\n      tree = tree[pathSegments.shift()];\n    }\n\n    return tree;\n  };\n\n  Lang.prototype._applyReplacements = function (message, replacements) {\n    for (var replace in replacements) {\n      message = message.replace(new RegExp(\":\" + replace, \"gi\"), function (match) {\n        var value = replacements[replace];\n        var allCaps = match === match.toUpperCase();\n\n        if (allCaps) {\n          return value.toUpperCase();\n        }\n\n        var firstCap = match === match.replace(/\\w/i, function (letter) {\n          return letter.toUpperCase();\n        });\n\n        if (firstCap) {\n          return value.charAt(0).toUpperCase() + value.slice(1);\n        }\n\n        return value;\n      });\n    }\n\n    return message;\n  };\n\n  Lang.prototype._testInterval = function (count, interval) {\n    if (typeof interval !== \"string\") {\n      throw \"Invalid interval: should be a string.\";\n    }\n\n    interval = interval.trim();\n    var matches = interval.match(intervalRegexp);\n\n    if (!matches) {\n      throw \"Invalid interval: \" + interval;\n    }\n\n    if (matches[2]) {\n      var items = matches[2].split(\",\");\n\n      for (var i = 0; i < items.length; i++) {\n        if (parseInt(items[i], 10) === count) {\n          return true;\n        }\n      }\n    } else {\n      matches = matches.filter(function (match) {\n        return !!match;\n      });\n      var leftDelimiter = matches[1];\n      var leftNumber = convertNumber(matches[2]);\n\n      if (leftNumber === Infinity) {\n        leftNumber = -Infinity;\n      }\n\n      var rightNumber = convertNumber(matches[3]);\n      var rightDelimiter = matches[4];\n      return (leftDelimiter === \"[\" ? count >= leftNumber : count > leftNumber) && (rightDelimiter === \"]\" ? count <= rightNumber : count < rightNumber);\n    }\n\n    return false;\n  };\n\n  Lang.prototype._getPluralForm = function (count) {\n    switch (this.locale) {\n      case \"az\":\n      case \"bo\":\n      case \"dz\":\n      case \"id\":\n      case \"ja\":\n      case \"jv\":\n      case \"ka\":\n      case \"km\":\n      case \"kn\":\n      case \"ko\":\n      case \"ms\":\n      case \"th\":\n      case \"tr\":\n      case \"vi\":\n      case \"zh\":\n        return 0;\n\n      case \"af\":\n      case \"bn\":\n      case \"bg\":\n      case \"ca\":\n      case \"da\":\n      case \"de\":\n      case \"el\":\n      case \"en\":\n      case \"eo\":\n      case \"es\":\n      case \"et\":\n      case \"eu\":\n      case \"fa\":\n      case \"fi\":\n      case \"fo\":\n      case \"fur\":\n      case \"fy\":\n      case \"gl\":\n      case \"gu\":\n      case \"ha\":\n      case \"he\":\n      case \"hu\":\n      case \"is\":\n      case \"it\":\n      case \"ku\":\n      case \"lb\":\n      case \"ml\":\n      case \"mn\":\n      case \"mr\":\n      case \"nah\":\n      case \"nb\":\n      case \"ne\":\n      case \"nl\":\n      case \"nn\":\n      case \"no\":\n      case \"om\":\n      case \"or\":\n      case \"pa\":\n      case \"pap\":\n      case \"ps\":\n      case \"pt\":\n      case \"so\":\n      case \"sq\":\n      case \"sv\":\n      case \"sw\":\n      case \"ta\":\n      case \"te\":\n      case \"tk\":\n      case \"ur\":\n      case \"zu\":\n        return count == 1 ? 0 : 1;\n\n      case \"am\":\n      case \"bh\":\n      case \"fil\":\n      case \"fr\":\n      case \"gun\":\n      case \"hi\":\n      case \"hy\":\n      case \"ln\":\n      case \"mg\":\n      case \"nso\":\n      case \"xbr\":\n      case \"ti\":\n      case \"wa\":\n        return count === 0 || count === 1 ? 0 : 1;\n\n      case \"be\":\n      case \"bs\":\n      case \"hr\":\n      case \"ru\":\n      case \"sr\":\n      case \"uk\":\n        return count % 10 == 1 && count % 100 != 11 ? 0 : count % 10 >= 2 && count % 10 <= 4 && (count % 100 < 10 || count % 100 >= 20) ? 1 : 2;\n\n      case \"cs\":\n      case \"sk\":\n        return count == 1 ? 0 : count >= 2 && count <= 4 ? 1 : 2;\n\n      case \"ga\":\n        return count == 1 ? 0 : count == 2 ? 1 : 2;\n\n      case \"lt\":\n        return count % 10 == 1 && count % 100 != 11 ? 0 : count % 10 >= 2 && (count % 100 < 10 || count % 100 >= 20) ? 1 : 2;\n\n      case \"sl\":\n        return count % 100 == 1 ? 0 : count % 100 == 2 ? 1 : count % 100 == 3 || count % 100 == 4 ? 2 : 3;\n\n      case \"mk\":\n        return count % 10 == 1 ? 0 : 1;\n\n      case \"mt\":\n        return count == 1 ? 0 : count === 0 || count % 100 > 1 && count % 100 < 11 ? 1 : count % 100 > 10 && count % 100 < 20 ? 2 : 3;\n\n      case \"lv\":\n        return count === 0 ? 0 : count % 10 == 1 && count % 100 != 11 ? 1 : 2;\n\n      case \"pl\":\n        return count == 1 ? 0 : count % 10 >= 2 && count % 10 <= 4 && (count % 100 < 12 || count % 100 > 14) ? 1 : 2;\n\n      case \"cy\":\n        return count == 1 ? 0 : count == 2 ? 1 : count == 8 || count == 11 ? 2 : 3;\n\n      case \"ro\":\n        return count == 1 ? 0 : count === 0 || count % 100 > 0 && count % 100 < 20 ? 1 : 2;\n\n      case \"ar\":\n        return count === 0 ? 0 : count == 1 ? 1 : count == 2 ? 2 : count % 100 >= 3 && count % 100 <= 10 ? 3 : count % 100 >= 11 && count % 100 <= 99 ? 4 : 5;\n\n      default:\n        return 0;\n    }\n  };\n\n  return Lang;\n});\n\n(function () {\n  Lang = new Lang();\n  Lang.setMessages({\n    \"en.js\": {\n      \"failed\": \"Sorry, looks like there are some errors detected, please try again.\",\n      \"password\": \"The provided password is incorrect.\",\n      \"throttle\": \"Too many login attempts. Please try again in :seconds seconds.\"\n    },\n    \"nl.js\": {\n      \"failed\": \"Sorry, er ging iets mis, probeer het opnieuw.\",\n      \"password\": \"The provided password is incorrect.\",\n      \"throttle\": \"Too many login attempts. Please try again in :seconds seconds.\"\n    }\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/lang/messages.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/core/plugins/custom/lang/messages.js");
/******/ 	
/******/ })()
;